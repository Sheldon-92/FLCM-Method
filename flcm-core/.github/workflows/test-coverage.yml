name: FLCM Test Coverage and Quality

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd .flcm-core
        npm ci

    - name: Run lint checks
      run: |
        cd .flcm-core
        npm run lint

    - name: Run type checking
      run: |
        cd .flcm-core
        npm run type-check

    - name: Run unit tests with coverage
      run: |
        cd .flcm-core
        npm run test:coverage
      env:
        NODE_ENV: test
        FLCM_LOG_LEVEL: error

    - name: Run integration tests
      run: |
        cd .flcm-core
        npm run test:integration
      env:
        NODE_ENV: test

    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: .flcm-core/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Generate coverage report
      if: matrix.node-version == '20.x'
      run: |
        cd .flcm-core
        npm run test:coverage:report

    - name: Upload coverage artifacts
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: .flcm-core/coverage/

    - name: Check coverage thresholds
      if: matrix.node-version == '20.x'
      run: |
        cd .flcm-core
        npm run test:coverage:check

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd .flcm-core
        npm audit --audit-level moderate

    - name: Run dependency check
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test-coverage]
    if: always()
    steps:
    - name: Download coverage artifacts
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: ./coverage

    - name: Quality gate check
      run: |
        echo "Checking quality gates..."
        
        # Extract coverage percentage from JSON report
        COVERAGE=$(node -p "JSON.parse(require('fs').readFileSync('./coverage/coverage-summary.json', 'utf8')).total.lines.pct")
        echo "Current coverage: $COVERAGE%"
        
        # Check if coverage meets minimum threshold
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          echo "‚úÖ Coverage threshold met: $COVERAGE% >= 80%"
        else
          echo "‚ùå Coverage threshold not met: $COVERAGE% < 80%"
          exit 1
        fi

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverageSummary = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
          
          const coverage = coverageSummary.total;
          const body = `
          ## üìä Test Coverage Report
          
          | Metric | Coverage | Status |
          |--------|----------|---------|
          | Lines | ${coverage.lines.pct}% | ${coverage.lines.pct >= 80 ? '‚úÖ' : '‚ùå'} |
          | Branches | ${coverage.branches.pct}% | ${coverage.branches.pct >= 75 ? '‚úÖ' : '‚ùå'} |
          | Functions | ${coverage.functions.pct}% | ${coverage.functions.pct >= 85 ? '‚úÖ' : '‚ùå'} |
          | Statements | ${coverage.statements.pct}% | ${coverage.statements.pct >= 80 ? '‚úÖ' : '‚ùå'} |
          
          ### Coverage Details
          - **Total Lines:** ${coverage.lines.covered}/${coverage.lines.total}
          - **Total Branches:** ${coverage.branches.covered}/${coverage.branches.total}
          - **Total Functions:** ${coverage.functions.covered}/${coverage.functions.total}
          - **Total Statements:** ${coverage.statements.covered}/${coverage.statements.total}
          
          ${coverage.lines.pct >= 80 ? '‚úÖ Coverage thresholds met!' : '‚ùå Coverage below threshold. Please add more tests.'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  performance-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd .flcm-core
        npm ci

    - name: Run performance benchmarks
      run: |
        cd .flcm-core
        npm run test:performance
      env:
        NODE_ENV: test

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .flcm-core/performance-results/

  uat-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd .flcm-core
        npm ci

    - name: Run User Acceptance Tests
      run: |
        # Run UAT with limited scenarios for CI
        node test-user-acceptance.js --scenarios end_to_end_workflow --personas techBlogger
      env:
        NODE_ENV: test
        CI: true

    - name: Upload UAT results
      uses: actions/upload-artifact@v3
      with:
        name: uat-results
        path: ./flcm-test-results/

  release-readiness:
    runs-on: ubuntu-latest
    needs: [test-coverage, security-scan, performance-test, uat-test]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Release readiness check
      run: |
        echo "üöÄ All quality gates passed - Ready for release!"
        echo "‚úÖ Test coverage meets thresholds"
        echo "‚úÖ Security scans passed" 
        echo "‚úÖ Performance tests passed"
        echo "‚úÖ User acceptance tests passed"
        
    - name: Create release badge
      run: |
        echo "[![Tests](https://img.shields.io/badge/tests-passing-green.svg)](https://github.com/${{ github.repository }}/actions)"
        echo "[![Coverage](https://img.shields.io/badge/coverage-80%25+-green.svg)](https://github.com/${{ github.repository }}/actions)"
        echo "[![Quality](https://img.shields.io/badge/quality-production--ready-green.svg)](https://github.com/${{ github.repository }}/actions)"