import { FLCMUIConfig, UITheme, UIComponent, UIRoute, UILocale } from './types';
export declare class FLCMUIManager {
    private config;
    private framework?;
    private renderer?;
    private stateManager?;
    private designSystem?;
    private components;
    private routes;
    private themes;
    private activeTheme;
    private stores;
    private subscriptions;
    private eventListeners;
    private errorBoundaries;
    private locales;
    private activeLocale;
    private featureFlags;
    private performanceObserver?;
    private analyticsQueue;
    private validationRules;
    constructor(config: FLCMUIConfig);
    initialize(): Promise<void>;
    private setupFramework;
    private setupServerSideRendering;
    private configureRouting;
    private configureStateManagement;
    private configureStyling;
    private loadFrameworkPlugin;
    private setupRenderer;
    private enableMemoization;
    private enableVirtualization;
    private enableBatchUpdates;
    private configureHydration;
    private setupStateManager;
    private initializeStore;
    private setupStateMiddleware;
    private enableStateDevtools;
    private setupStatePersistence;
    private setupStateSync;
    private setupDesignSystem;
    private loadDesignTokens;
    private loadComponentLibrary;
    private applyDesignPattern;
    private registerComponents;
    registerComponent(component: UIComponent): Promise<void>;
    private validateComponent;
    private setupComponentState;
    private setupComponentEvents;
    private setupComponentValidation;
    private setupComponentAccessibility;
    private generateComponentExamples;
    private generateExamplePreview;
    private generateExamplePlayground;
    private registerTemplate;
    private registerComposition;
    private setupRouting;
    private registerRoute;
    private setupRouteGuard;
    private setupNavigation;
    private setupNavigationMenu;
    private setupBreadcrumbs;
    private generateSitemap;
    private setupThemes;
    applyTheme(themeId: string): Promise<void>;
    private applyColorPalette;
    private applyTypography;
    private applySpacing;
    private applyAnimations;
    private applyShadows;
    private applyBorders;
    private setupLocalization;
    private loadLocaleResources;
    private setupLocaleDetection;
    changeLocale(localeCode: string): Promise<void>;
    private notifyLocaleChange;
    private setupAuthentication;
    private setupAuthProvider;
    private configureAuthEndpoints;
    private setupAuthStorage;
    private setupAuthFeatures;
    private setupSocialLogin;
    private setupTwoFactor;
    private setupBiometric;
    private setupAccessibility;
    private setupAccessibilityFeatures;
    private enableHighContrast;
    private enableFontSizeControl;
    private enableReducedMotion;
    private enableKeyboardNavigation;
    private enableScreenReaderSupport;
    private addSkipLinks;
    private setupAccessibilityTesting;
    private setupPerformance;
    private setupOptimization;
    private setupBundling;
    private setupLazyLoading;
    private setupPreloading;
    private setupCompression;
    private setupImageOptimization;
    private setupPerformanceMonitoring;
    private registerPerformanceMetric;
    private setupPerformanceObserver;
    private processPerformanceEntry;
    private setupPerformanceReporting;
    private setupPerformanceAlert;
    private setupCaching;
    private setupAnalytics;
    private setupAnalyticsProvider;
    private registerAnalyticsEvent;
    private setupPrivacySettings;
    private setupErrorHandling;
    private setupErrorBoundary;
    private setupErrorHandler;
    private setupErrorReporting;
    private setupErrorRecovery;
    private registerRecoveryStrategy;
    private setupFeatures;
    private setupSearchFeature;
    private setupNotificationFeature;
    private setupFeedbackFeature;
    private setupHelpFeature;
    private setupHelpResource;
    private setupExperiments;
    getComponent(id: string): UIComponent | undefined;
    getRoute(path: string): UIRoute | undefined;
    getTheme(): UITheme;
    getLocale(): UILocale | undefined;
    isFeatureEnabled(featureKey: string): boolean;
    navigateTo(path: string): Promise<void>;
    private checkRouteGuard;
    validateInput(componentId: string, value: any): Promise<boolean>;
    private checkValidationRule;
    emit(eventName: string, data?: any): void;
    on(eventName: string, callback: Function): void;
    off(eventName: string, callback: Function): void;
    shutdown(): Promise<void>;
    exportDesignTokens(): Promise<Record<string, any>>;
    generateStyleGuide(): Promise<string>;
    runAccessibilityAudit(): Promise<any[]>;
    getMetrics(): Record<string, any>;
}
